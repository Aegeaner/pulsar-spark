/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'idea'

allprojects {
    apply from: "$rootDir/gradle/license.gradle"
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    version = ledgerxVersion
    group = "org.apache.bookkeeper.segment"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        testCompile group: 'junit', name: 'junit', version: junitVersion
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    test {
        testLogging.showStandardStreams = true
        maxParallelForks = 1
        forkEvery 1
        reports {
            html.enabled = true
        }
    }
}

idea {
    project {
        languageLevel = '1.8'
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

project(':test:common') {
    dependencies {
        compile group: 'junit', name: 'junit', version: junitVersion
        compile group: 'org.apache.distributedlog', name: 'distributedlog-core', classifier: 'tests', version: bookkeeperVersion
        compile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        compile group: 'org.powermock', name: 'powermock-api-mockito2', version: powermockVersion
        compile group: 'org.powermock', name: 'powermock-module-junit4', version: powermockVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    }
}

project(':segment') {
    dependencies {
        testCompile project(':test:common')
        compile group: 'org.apache.bookkeeper', name: 'bookkeeper-server', version: bookkeeperVersion
        compile group: 'org.apache.bookkeeper', name: 'circe-checksum', ext: 'jar', version: bookkeeperVersion
        compile group: 'org.apache.pulsar', name: 'managed-ledger-original', version: pulsarVersion
        compile group: 'org.apache.pulsar', name: 'pulsar-client-admin-original', version: pulsarVersion
    }
}

project(':connectors:flink') {
    dependencies {
        compile group: 'org.apache.flink', name: 'flink-core', version: flinkVersion
        compile group: 'org.apache.flink', name: 'flink-table_2.11', version: flinkVersion
        compile project(':segment')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}

// license plugin

task licenseFormatAll(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: ".").include("**/*")
}
licenseFormat.dependsOn licenseFormatAll

task licenseCheckAll(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: ".").include("**/*")
}

// findbugs plugin
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
